import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

# –í–∑–µ–º–∞–º–µ —Ç–æ–∫–µ–Ω–∞ –∏ Channel ID –æ—Ç Environment Variables (Render)
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –°—ä—Ö—Ä–∞–Ω—è–≤–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø–æ ID
user_data = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤–µ–π! –ò–∑–ø—Ä–∞—Ç–∏ /signal –∑–∞ –Ω–æ–≤ —Å–∏–≥–Ω–∞–ª –∑–∞ –∑–ª–∞—Ç–æ (XAUUSD)."
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /signal ---
async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìà BUY", callback_data="BUY"),
            InlineKeyboardButton("üìâ SELL", callback_data="SELL")
        ]
    ]
    await update.message.reply_text(
        "–ò–∑–±–µ—Ä–∏ –ø–æ—Å–æ–∫–∞:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –û–±—Ä–∞–±–æ—Ç–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ BUY/SELL ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data[query.from_user.id] = {"type": query.data}
    await query.message.reply_text("–í—ä–≤–µ–¥–∏ Entry price:")

# --- –û–±—Ä–∞–±–æ—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ (Entry, SL, TP, Confidence) ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if uid not in user_data:
        return

    data = user_data[uid]

    if "entry" not in data:
        data["entry"] = update.message.text
        await update.message.reply_text("–í—ä–≤–µ–¥–∏ Stop Loss:")
    elif "sl" not in data:
        data["sl"] = update.message.text
        await update.message.reply_text("–í—ä–≤–µ–¥–∏ Take Profit:")
    elif "tp" not in data:
        data["tp"] = update.message.text
        await update.message.reply_text(
            "–í—ä–≤–µ–¥–∏ Confidence (–ø–æ –∂–µ–ª–∞–Ω–∏–µ) –∏–ª–∏ 'skip':"
        )
    elif "confidence" not in data:
        conf = update.message.text
        data["confidence"] = None if conf.lower() == "skip" else conf

        # –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –∫–∞–Ω–∞–ª–∞
        msg = (
            f"üìä *XAUUSD (Gold)*\n"
            f"Signal: *{data['type']}*\n"
            f"Entry: `{data['entry']}`\n"
            f"SL: `{data['sl']}`\n"
            f"TP: `{data['tp']}`\n"
        )
        if data["confidence"]:
            msg += f"Confidence: *{data['confidence']}%*"

        # –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∫–∞–Ω–∞–ª–∞
        await context.bot.send_message(
            chat_id=CHANNEL_ID, text=msg, parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ Signal sent to channel.")
        del user_data[uid]

# --- –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ ---
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ handler-–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("signal", signal))
app.add_handler(CallbackQueryHandler(button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Bot started...")
    app.run_polling()
